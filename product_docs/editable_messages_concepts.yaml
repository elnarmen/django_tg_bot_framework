Редактируемое сообщение: !concept
  Определение: |
    Редактируемое сообщение хранит в БД настройки чат-бота, необходимые тому для отправки пользователю бота сообщений в Tg.
  Текстовка: !example
  Картинка: !example
  Фотография: !example
  Шаблонизированное сообщение: !example
  Markdown форматирование: !example
  HTML форматирование: !example
  С клавиатурой: !example
  Черновик: !example |
    Текстовка сообщения ещё не прошла редактуру и не готова к использованию.
  Опубликованное сообщение: !example |
    Контент-менеджер проверил текстовку и разрешил отправлять её пользователям.
  На китайском: !example |
    В БД может быть несколько похожих сообщений, предназначенных для пользователей с разными локалями: русский, китайский,
    английский, etc. Каждое сообщение/текстовка привязана к своей локали.
  Выгруженное сообщение: !example |
    Содержимое редактируемого сообщения вместе с контентом можно выгрузить из одной БД и залить в другую.
  Сообщение без схемы: !exclusion |
    Запрещаем хранить в БД сообщения без указания схемы, так как в таком случае становится сложно отследить какой код
    какими сообщениями пользуется. Со временем это приводит к замусориванию БД, так как удаление текстовок воспринимается
    как опасная ситуация.
  Локатор класса состояния: !example |
    Каждая сообщение привязано к локатору. Этот локатор используется для поиска сообщений в БД.
  Один локатор — несколько сообщений: !example |
    К одному локатору `/menu/` могут быть привязаны сразу несколько сообщений: Prompt, ReactionOnMessage, Farewell.
  Упорядоченные сообщения: !example |
    Когда контента оказывается слишком много для одного сообщения контент-менеджер может разбить одно сообщение на два. Так, например,
    к одному локатору `/info/` могут быть привязаны сразу несколько сообщений. Пользователь получит их все в указанном порядке.
  Одна текстовка — несколько локаторов: !exclusion |
    Если так получилось, что один класс состояния зарегистрирован по разным локаторам, то в БД создаём отдельный набор сообщений для
    каждого локатора, считаем их разными. Это приведёт к созданию копий в БД, но зато так сохраним гибкость. Да и ситуация эта не
    самая частая.
  Одна текстовка — несколько отличающихся схем данных: !exclusion |
    Чтобы не создавать лишнюю путаницу действуем по аналогии с тем, как работает git -- каждому коммиту свой снимок файловой системы
    с полным набором файлов. Да, это приведёт к созданию кучи копий сообщений в БД, но зато сохраним контроль и сможем снять остроту
    проблемы с помощью простых в реализации эвристик.
  Кастомный виджет: !extension |
    В чат-бота добавлен особый редактируемых сообщений, который не поддерживается фреймворком и библиотекой tg_api, но прикладной
    код знает как с ними работать. В админке для такого типа сообщений предусмотрен свой особый тип виджета, упрощающий жизнь
    контент-менеджеру.


Схема сообщений: !concept
  Определение: |
    Схема сообщений — это перечисление того, какие текстовки, картинки и прочий контент необходим для работы стейт-машины.
    Схема сообщений — это аналог контракта между программистами и контент-менеджерами.
  Тексты триггерных рассылок: !example |
    Для триггерных рассылок может быть создана отдельная стейт-машина со своими текстовками.
  Реализованная схема: !example |
    В схеме есть полный набор опубликованных сообщений, чтобы соответствовать минимальным требованиям.
  Нереализованная схема: !example |
    Сообщения в БД CMS не полностью соответствуют заявленной схеме: не хватает сообщений, кнопок в клавиатуре или схема контекста
    устарела.
  Защищённая схема: !example |
    CMS внимательно следит за тем, чтобы контент-менеджер случайно не нарушил правила, заданные программистами для корректной
    работы кода.
  Трёхязычная схема: !example |
    Схема требует полного набора текстовок для трёх языков: русский, английский и китайский.
  Схема без кода: !extension |
    Ещё на этапе проектирования чат-бота до написания кода продукт менеджер зафиксировал схему сообщений бота и даже написал
    текстовки, чтобы использовать их в качестве ТЗ для программистов.
  Выгруженная схема: !extension |
    Схему сообщений ещё не успели загрузить в CMS, и она существует в виде отдельного текстового файла. Такой файл подходит для
    хранения в репозитории кода. Этот файл можно загрузить в CMS или выгрузить оттуда.
  Автогенерённая схема: !extension |
    Схема сообщений создана автоматически по py-коду уже написанного телеграм-бота.
  Суть сообщений: !example |
    Для некоторых сообщений в схеме указан не только локатор и прочие id, но и сформулирована ключевая мысль сообщения, чтобы и
    программист и контент-менеджеры понимали о чём здесь речь, пока не готова текстовка.
  Локализованная суть сообщений: !exclusion |
    Нет смысла переводить ключевую мысль сообщения на разные языки. Считаем, что и контент-менеджеры и программисты могут
    общаться на одном общем языке. На этом общем языке и формулируется суть сообщений.
  Подсказки для контент-менеджера: !example |
    Для сообщений указаны подсказки для контент-менеджеров, чтобы тем проще было сориентироваться.
  Локализованные подсказки: !exclusion |
    Нет смысла переводить подсказки на разные языки. Считаем, что и контент-менеджеры и программисты могут
    общаться на одном общем языке. На этом общем языке и формулируются подсказки.
  Несколько схем в одной CMS: !example |
    В одной CMS одновременно могут существовать и поддерживаться в рабочем состоянии несколько схем сообщений. Например, одна схема
    может использоваться здесь и сейчас, а вторая — готовиться к обновлённой версии ПО на сервере.
